1)Create a db called 'my_first_db'
> db.createCollection("my_first_db")
{ "ok" : 1 }
2)Each document you insert into this collection should have the 
following format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})
Create 5 students with the appropriate info

> db.my_first_db.insert({name:"student1", home_state:"TX", luck_number:13, birthday: {month:3, day:14, year:1990}})
WriteResult({ "nInserted" : 1 })
> db.my_first_db.insert({name:"student2", home_state:"CA", luck_number:1, birthday: {month:9, day:10, year:1992}})
WriteResult({ "nInserted" : 1 })
> db.my_first_db.insert({name:"student3", home_state:"WA", luck_number:8, birthday: {month:4, day:9, year:1995}})
WriteResult({ "nInserted" : 1 })
> db.my_first_db.insert({name:"student5", home_state:"WA", luck_number:10, birthday: {month:1, day149, year:1991}})
> db.my_first_db.insert({name:"student5", home_state:"WA", luck_number:10, birthday: {month:1, day:14, year:1991}})
WriteResult({ "nInserted" : 1 })

3)Retrieve all students who are from CA or WA
> db.my_first_db.find({$or : [{home_state:"CA"}, {home_state:"WA"}] }).pretty()
{
        "_id" : ObjectId("59160cc05a7649b2cd23f9f7"),
        "name" : "student2",
        "home_state" : "CA",
        "luck_number" : 1,
        "birthday" : {
                "month" : 9,
                "day" : 10,
                "year" : 1992
        }
}
{
        "_id" : ObjectId("59160d215a7649b2cd23f9f8"),
        "name" : "student3",
        "home_state" : "WA",
        "luck_number" : 8,
        "birthday" : {
                "month" : 4,
                "day" : 9,
                "year" : 1995
        }
}
{
        "_id" : ObjectId("59160db45a7649b2cd23f9f9"),
        "name" : "student5",
        "home_state" : "WA",
        "luck_number" : 10,
        "birthday" : {
                "month" : 1,
                "day" : 14,
                "year" : 1991
        }
}

4)Get all students whose luck number is gt 3, lte 10 ,between 1 and 9(inclusive)
> db.my_first_db.find( {luck_number:{$gt:3} }).pretty()
> db.my_first_db.find( {luck_number:{$lte:10} }).pretty()

5)Add a field to each student collection called 'interests' that is an Array.It should contain the following entries:
'coding', 'brunch', 'Mongodb':
> db.my_first_db.update( {},{$set: {"interests":["coding","brunch","MongoDB"]} },{multi:true})

6)Add the unique interests for each particular students into each of their interest arrays:
 
 > db.my_first_db.update( {name:"student3"},{$push: {interests:{$each:["cooking","dancing"]}} })
> db.my_first_db.update( {name:"student2"},{$push: {interests:{$each:["swimming","reading"]}} })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.my_first_db.update( {name:"student5"},{$push: {interests:{$each:["Netflixing","chilling"]}} })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

7)Add the interest 'taxes' into someone's interest array
> db.my_first_db.update( {name:"student5"},{$push: {interests:"taxes"} })

8)Remove the 'taxes' interest you just added
> db.my_first_db.update( {name:"student5"},{$pull: {interests:"taxes"} })

9)Remove all the students who are from CA or WA 
> db.my_first_db.remove({$or : [{home_state:"CA"}, {home_state:"WA"}] })

13)Remove a user by name
> db.my_first_db.remove({name:"john" })

14)Remove a student whose lucky_number is greater than 5 (JUSTone)
> db.my_first_db.remove({lucky_number:{$gt:5}},{justOne:true})

15)Add a field to each student collection called 'number_of_belts' and set it to 0.
> db.my_first_db.update( {},{$set: {"number_of_belts":0 }},{multi:true})

16)Increment this field by 1 for all students in Washington (Seattle Dojo)
> db.my_first_db.update( {home_state:"WA"},{$inc: {number_of_belts:1 }},{multi:true})

17)Rename the 'number_of_belts' field to 'belts_earned'
> db.my_first_db.update( {},{$rename: {"number_of_belts":"belts_earned" }}) 

18)Remove the 'lucky_number' field
> db.my_first_db.update( {},{$unset: {lucky_number:"" }},{multi:true})

19)Add a 'updated_on' field, and set the value as the current date.
> db.my_first_db.update({}, {$currentDate:{updated_on:true}},{multi:true})